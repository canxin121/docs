import{_ as r,X as o,Y as i,a2 as l,Z as t,a1 as e,$ as a,a3 as d,F as s}from"./framework-0fc4b7de.js";const c="/docs/resource/Spark_GPT/1.png",h="/docs/resource/Spark_GPT/2.png",b="/docs/resource/Spark_GPT/3.png",u="/docs/resource/Spark_GPT/4.png",p="/docs/resource/Spark_GPT/5.png",_="/docs/resource/Spark_GPT/6.png",g="/docs/resource/Spark_GPT/7.png",m="/docs/resource/Spark_GPT/8.png",v="/docs/resource/Spark_GPT/9.png",x="/docs/resource/Spark_GPT/10.png",k="/docs/resource/Spark_GPT/11.png",f="/docs/resource/Spark_GPT/12.png",q="/docs/resource/Spark_GPT/13.png",y="/docs/resource/Spark_GPT/14.png",w="/docs/resource/Spark_GPT/15.png",S="/docs/resource/Spark_GPT/16.png",P="/docs/resource/Spark_GPT/17.png",T={},G=t("p",null,"仅用于学习交流使用,请勿用于商用收费,请勿用于违法行为.",-1),E=d('<blockquote><p>注意本插件使用了一个第三方程序进行文转图，所以不管你是否熟悉nonebot，请务必看教程2.(2)</p></blockquote><h1 id="最新版本号1-1-3" tabindex="-1"><a class="header-anchor" href="#最新版本号1-1-3" aria-hidden="true">#</a> 最新版本号1.1.3</h1><h1 id="介绍部分" tabindex="-1"><a class="header-anchor" href="#介绍部分" aria-hidden="true">#</a> 介绍部分</h1><h2 id="功能特性" tabindex="-1"><a class="header-anchor" href="#功能特性" aria-hidden="true">#</a> 功能特性</h2><ul><li>汇聚众多来源的gpt(poe(chatgpt+claude),chatgpt网页版,Newbing,slack claude,讯飞星火,通义千问),支持多平台(tg,kook( 原开黑啦),qq(gocq),discord)使用且不同平台用户数据绑定互通</li><li>支持人格预设和前缀系统,支持文转图文转链接,支持每个用户创建不同来源不同人格的bot,同时支持公用共同的bot</li><li>注重提示词工程,通过提示词工程可以实现角色扮演,要求回复格式,如实现EitherChoice的对比功能</li><li>支持webui配置各来源的配置项以及管理预设和人格</li><li>性能和效率优秀,使用便捷方便,功能实用</li><li>便捷的代码方式,全api统一调用,方便新增来源</li><li>借助nonebot框架实现多平台统一消息处理,增加代码复用</li></ul><h2 id="todolist" tabindex="-1"><a class="header-anchor" href="#todolist" aria-hidden="true">#</a> TodoList</h2><ol><li>适配更多平台<s>discord</s>,飞书,微信,qq频道等</li><li>增加英文版本文档及代码提示内容</li><li>增加各来源chatbot的负载均衡</li><li><s>补全一些不同来源的gpt的功能</s></li></ol><h1 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h1><h2 id="一-从零开始的安装教程" tabindex="-1"><a class="header-anchor" href="#一-从零开始的安装教程" aria-hidden="true">#</a> 一. 从零开始的安装教程</h2><h3 id="_1-安装nonebot框架-并创建nonebot项目" tabindex="-1"><a class="header-anchor" href="#_1-安装nonebot框架-并创建nonebot项目" aria-hidden="true">#</a> 1.安装nonebot框架,并创建nonebot项目</h3>',10),z={id:"_1-需要确保本机已安装python3-8及以上版本-推荐py3-11-并配置了正确的系统环境变量-如果没有安装py-可以参考这个教程进行安装-python初学者在不同系统上安装python的保姆级指引",tabindex:"-1"},B=t("a",{class:"header-anchor",href:"#_1-需要确保本机已安装python3-8及以上版本-推荐py3-11-并配置了正确的系统环境变量-如果没有安装py-可以参考这个教程进行安装-python初学者在不同系统上安装python的保姆级指引","aria-hidden":"true"},"#",-1),F={href:"https://blog.csdn.net/qq_20288327/article/details/124387986",target:"_blank",rel:"noopener noreferrer"},C=d(`<h4 id="_2-使用pipx安装nb-cli" tabindex="-1"><a class="header-anchor" href="#_2-使用pipx安装nb-cli" aria-hidden="true">#</a> (2).使用pipx安装nb-cli</h4><p>首先安装pipx<br> 如果在此步骤的输出中出现了“open a new terminal”或者“re-login”字样，那么请关闭当前终端并重新打开一个新的终端。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python -m pip install --user pipx
python -m pipx ensurepath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用pipx安装nb-cli</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pipx install nb-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-使用nb-cli创建nb项目目录" tabindex="-1"><a class="header-anchor" href="#_3-使用nb-cli创建nb项目目录" aria-hidden="true">#</a> (3).使用nb-cli创建nb项目目录</h4><p>先找到一个目录,用来存放nb项目文件夹<br> 比如我这里可以在win桌面按住shift再点击右键,打开一个powershell,就相当于吧nb项目文件夹创建在桌面上 <img src="`+c+`" alt="打开powershell" loading="lazy"><br> 在命令行工具如powershell中输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时应该出现了交互式的面板用以创建nb项目,交互方式是鼠标点击选中或者上下键切换空格键选中，然后按enter提交并进入下一个界面<br> 这里我们选择创建一个Nonebot项目并回车，而后提示输入一个名称，这里我们自己想一个名字输入就可以，这个名字是创建完成后文件夹的名字<br><img src="`+h+'" alt="nb-cli" loading="lazy"><br> 然后选择bootstrap按enter<br><img src="'+b+'" alt="nb-cli" loading="lazy"><br> 然后选中如图绿色驱动器的并enter<br><img src="'+u+'" alt="nb-cli" loading="lazy"><br> 然后选中如图绿色的适配器并enter<br><img src="'+p+'" alt="nb-cli" loading="lazy"><br> 然后选中如图连续输入两次Y来创建项目<br><img src="'+_+'" alt="nb-cli" loading="lazy"><br> 最后提示我们选择内置插件，这里可以选择echo并回车，也可以不选，但是不要选择singlesession<br><img src="'+g+'" alt="nb-cli" loading="lazy"> 至此nb项目文件夹已经创建完毕</p><h3 id="_2-安装本插件及依赖软件" tabindex="-1"><a class="header-anchor" href="#_2-安装本插件及依赖软件" aria-hidden="true">#</a> 2.安装本插件及依赖软件</h3><h4 id="_1-使用nb命令一键安装插件-其他nb插件安装同理-可以去商店看看-有众多实用和有趣插件" tabindex="-1"><a class="header-anchor" href="#_1-使用nb命令一键安装插件-其他nb插件安装同理-可以去商店看看-有众多实用和有趣插件" aria-hidden="true">#</a> (1).使用nb命令一键安装插件，其他nb插件安装同理，可以去商店看看，有众多实用和有趣插件</h4><p>完成上一步(3)后，我们关闭powershell，并且打开这个新创建的nb项目的文件夹，在文件夹里面重新打开powershell<br><img src="'+m+`" alt="nb-cli" loading="lazy"><br> 在命令行中输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nb plugin install spark_gpt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后等待插件安装完毕</p><h4 id="_2-安装-wkhtmltopdf用以高效的文转图" tabindex="-1"><a class="header-anchor" href="#_2-安装-wkhtmltopdf用以高效的文转图" aria-hidden="true">#</a> (2).安装 wkhtmltopdf用以高效的文转图:</h4><ol><li>Debian/Ubuntu系统 使用apt命令一键安装即可:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt-get install wkhtmltopdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>MacOSX系统 使用brew命令安装:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>brew install --cask wkhtmltopdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Windows 和其他系统:</li></ol>`,20),D={href:"https://wkhtmltopdf.org/downloads.html",target:"_blank",rel:"noopener noreferrer"},A=t("br",null,null,-1),N=t("br",null,null,-1),V=t("img",{src:v,alt:"nb-cli",loading:"lazy"},null,-1),I=t("br",null,null,-1),O=t("br",null,null,-1),M=t("img",{src:x,alt:"nb-cli",loading:"lazy"},null,-1),H=t("br",null,null,-1),K=t("br",null,null,-1),L=t("br",null,null,-1),X=t("img",{src:k,alt:"nb-cli",loading:"lazy"},null,-1),W=t("br",null,null,-1),Y=t("br",null,null,-1),Q=t("img",{src:f,alt:"nb-cli",loading:"lazy"},null,-1),R=t("br",null,null,-1),U=t("br",null,null,-1),Z=t("img",{src:q,alt:"nb-cli",loading:"lazy"},null,-1),j=t("br",null,null,-1),J=t("br",null,null,-1),$=t("img",{src:y,alt:"nb-cli",loading:"lazy"},null,-1),tt=t("br",null,null,-1),et=d('<h3 id="_3-配置本插件的env设置" tabindex="-1"><a class="header-anchor" href="#_3-配置本插件的env设置" aria-hidden="true">#</a> 3.配置本插件的env设置</h3><p>只有两个配置项,用以配置webui的地址</p><table><thead><tr><th>配置项</th><th>配置含义</th></tr></thead><tbody><tr><td>spark_host</td><td>本插件webui的host</td></tr><tr><td>spark_port</td><td>本插件webui的port</td></tr></tbody></table>',3),nt={href:"http://127.0.0.1:8666/%E6%9D%A5%E8%AE%BF%E9%97%AEwebui%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF",target:"_blank",rel:"noopener noreferrer"},at=d(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spark_host = 127.0.0.1
spark_port = 8666
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-配置好不同平台的对接-以在对应平台使用本插件" tabindex="-1"><a class="header-anchor" href="#_4-配置好不同平台的对接-以在对应平台使用本插件" aria-hidden="true">#</a> 4.配置好不同平台的对接,以在对应平台使用本插件</h3>`,2),dt=t("br",null,null,-1),rt={href:"https://www.bilibili.com/video/BV1nu411h7bS/?spm_id_from=333.337.search-card.all.click&vd_source=8dd506c36e6670647607bab36d681869",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://github.com/Mrs4s/go-cqhttp/releases",target:"_blank",rel:"noopener noreferrer"},it=t("br",null,null,-1),lt=t("br",null,null,-1),st=t("li",null,[t("p",null,[e("telegram平台: 使用nonebot的telegram适配器一键链接"),t("br"),e(" (1).如果你没有tg的bot，先申请一个bot:"),t("br"),e(" 1).首先你需要有一个 Telegram 帐号，添加 BotFather 为好友。"),t("br"),e(" 2).接着，向它发送 /newbot 指令，按要求回答问题。"),t("br"),e(" 3).如果你成功创建了一个机器人，BotFather 会发给你机器人的 token,格式如下：")])],-1),ct=d(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>  4).然后你需要向 BotFather 发送 /setprivacy 并选择 Disable。  
  5).并且你还需要向 BotFather 发送 /setinline。  
</code></pre><p>(2).将tgbot的token添加到nonebot项目文件夹的.env文件(如果你看不见,请开启显示隐藏的文件)中，格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>telegram_bots = [{&quot;token&quot;: &quot;1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI&quot;}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),ht=t("br",null,null,-1),bt={href:"https://developer.kookapp.cn/app/index",target:"_blank",rel:"noopener noreferrer"},ut=t("div",{class:"language-text line-numbers-mode","data-ext":"text"},[t("pre",{class:"language-text"},[t("code",null,`kaiheila_bots =[{"token": "1/MTA2MjE=/DnbsqfmN6/IfVCrdOiGXKcQ=="}]
`)]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"})])],-1),pt=t("br",null,null,-1),_t=t("br",null,null,-1),gt={href:"https://discord.com/developers/applications",target:"_blank",rel:"noopener noreferrer"},mt=t("br",null,null,-1),vt=t("br",null,null,-1),xt=t("br",null,null,-1),kt=t("br",null,null,-1),ft=d(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install git+https://github.com/CMHopeSunshine/adapter-discord.git@dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>  2).配置pyproject.toml,在其中的adapters中添加  
</code></pre><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{ name = &quot;discord&quot;, module_name = &quot;nonebot.adapters.discord&quot; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>  3).配置.env.*,在其中添加,其中token的值,替换成刚才创建的bot的值  
</code></pre><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DISCORD_BOTS=&#39;
[
  {
    &quot;token&quot;: &quot;xxx&quot;,
    &quot;intent&quot;: {
      &quot;guild_messages&quot;: true,
      &quot;direct_messages&quot;: true
    }
  }
]
&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-webui配置介绍" tabindex="-1"><a class="header-anchor" href="#二-webui配置介绍" aria-hidden="true">#</a> 二. Webui配置介绍</h2><p>首页可以选择进入配置和预设两个配置面板<br><img src="`+w+'" alt="webui首页" loading="lazy"><br> 配置界面可以配置各个来源的gpt所需的内容，各项均有小字注释来解释<br><img src="'+S+'" alt="webui配置界面" loading="lazy"><br> 预设界面可以删除添加改名预设以及修改预设对应内容，点击左侧对应预设才会在右侧显示并可以显示对应预设<br><img src="'+P+'" alt="webui预设界面" loading="lazy"></p><h2 id="三-控制命令介绍" tabindex="-1"><a class="header-anchor" href="#三-控制命令介绍" aria-hidden="true">#</a> 三. 控制命令介绍</h2><p>命令前缀均可修改,</p><p>以下介绍中,以前缀/表示使用自己的bot,前缀.表示公用的bot,这两个前缀可以在webui中进行修改 以/表示nonebot的默认命令前缀,这个前缀可以在env中修改nonebot的响应命令前缀来进行修改</p><h4 id="_1-使用bot方式" tabindex="-1"><a class="header-anchor" href="#_1-使用bot方式" aria-hidden="true">#</a> 1.使用bot方式</h4><h5 id="_1-使用命令-先查询可用的bot或创建新的bot-然后使用-前缀-bot名称-你所询问的内容-或-刷新指令-。这里前缀-使用自己的bot-前缀-使用公用的bot" tabindex="-1"><a class="header-anchor" href="#_1-使用命令-先查询可用的bot或创建新的bot-然后使用-前缀-bot名称-你所询问的内容-或-刷新指令-。这里前缀-使用自己的bot-前缀-使用公用的bot" aria-hidden="true">#</a> (1).使用命令:先查询可用的bot或创建新的bot,然后使用“前缀+bot名称+你所询问的内容 或 刷新指令”。这里前缀 &quot;/&quot; 使用自己的bot,前缀 &quot;.&quot; 使用公用的bot.</h5><blockquote><p>当询问内容为 刷新指令 也就是 &quot;清除对话&quot; 或 &quot;清空对话&quot; 或&quot;刷新对话&quot; 时,将清除和bot的聊天记录,即重新开始对话</p></blockquote><p>一个可能的私有的bot使用示例为 “/chat 在吗?” 这里的chat就是我自己的bot,是我创建的,并且可以通过 “/所有bot” 查询 一个可能的公用的bot使用示例为 “.chat 在吗?” 这里的chat是公用的bot,可以通过 “.所有bot” 查询,但只有本插件管理员可以创建<br> 一个可能的清除某个bot的聊天记录的示例为 “/chat 刷新对话”</p><h5 id="_2-无需命令-直接回复某个bot的最后一条消息来继续对话" tabindex="-1"><a class="header-anchor" href="#_2-无需命令-直接回复某个bot的最后一条消息来继续对话" aria-hidden="true">#</a> (2).无需命令:直接回复某个bot的最后一条消息来继续对话</h5><blockquote><p>注意公用的bot可能也在和别人对话,所以最后一条消息不一定是发给你的最后一条</p></blockquote><h4 id="_2-以下是bot管理命令列表-这里有两种不同前缀代表不用含义" tabindex="-1"><a class="header-anchor" href="#_2-以下是bot管理命令列表-这里有两种不同前缀代表不用含义" aria-hidden="true">#</a> 2.以下是bot管理命令列表,这里有两种不同前缀代表不用含义</h4><h5 id="使用-前缀表示管理自己的bot" tabindex="-1"><a class="header-anchor" href="#使用-前缀表示管理自己的bot" aria-hidden="true">#</a> 使用**/**前缀表示管理自己的bot</h5><h5 id="使用-前缀表示管理公用用户的bot" tabindex="-1"><a class="header-anchor" href="#使用-前缀表示管理公用用户的bot" aria-hidden="true">#</a> 使用**.** 前缀表示管理公用用户的bot</h5><table><thead><tr><th>命令</th><th>命令含义</th><th>命令可用用户</th></tr></thead><tbody><tr><td>所有bot</td><td>查询所有的可用的bot</td><td>所有用户可用</td></tr><tr><td>创建bot</td><td>创建新的bot</td><td>.开头仅SparkGPT管理员可用,/开头所有用户可用</td></tr><tr><td>改名bot</td><td>更改bot的名称</td><td>.开头仅SparkGPT管理员可用,/开头所有用户可用</td></tr><tr><td>删除bot</td><td>删除指定bot</td><td>.开头仅SparkGPT管理员可用,/开头所有用户可用</td></tr></tbody></table><h4 id="_3-以下是用户信息命令列表-所有命令前需要加上前缀-才能触发。" tabindex="-1"><a class="header-anchor" href="#_3-以下是用户信息命令列表-所有命令前需要加上前缀-才能触发。" aria-hidden="true">#</a> 3.以下是用户信息命令列表,所有命令前需要加上前缀/才能触发。</h4><table><thead><tr><th>命令</th><th>命令含义</th><th>命令可用用户</th></tr></thead><tbody><tr><td>用户信息</td><td>查询当前用户的通用用户的用户名和密钥.建议私聊使用</td><td>所有用户可用</td></tr><tr><td>更改绑定</td><td>将当前平台账户绑定到指定通用账户,实现跨平台数据互通</td><td>所有用户可用</td></tr></tbody></table><h1 id="_4-以下是预设管理命令列表-所有命令前需要加上前缀-才能触发。" tabindex="-1"><a class="header-anchor" href="#_4-以下是预设管理命令列表-所有命令前需要加上前缀-才能触发。" aria-hidden="true">#</a> 4.以下是预设管理命令列表,所有命令前需要加上前缀/才能触发。</h1><blockquote><p>预设是指在创建某个bot时,第一条发向这个bot的人格设定,并且刷新时也会一并发送</p></blockquote><table><thead><tr><th>命令</th><th>命令含义</th><th>命令可用用户</th></tr></thead><tbody><tr><td>所有预设</td><td>给出所有预设的名称</td><td>所有用户可用</td></tr><tr><td>查询预设</td><td>查询指定预设的内容</td><td>所有用户可用</td></tr><tr><td>添加预设</td><td>添加新的预设(可覆盖同名预设)</td><td>SparkGPT管理员可用</td></tr><tr><td>改名预设</td><td>修改预设的名字(可覆盖同名预设)</td><td>SparkGPT管理员可用</td></tr><tr><td>删除预设</td><td>删除指定预设</td><td>SparkGPT管理员可用</td></tr></tbody></table><h1 id="_5-以下是前缀管理命令列表-所有命令前需要加上前缀-才能触发。" tabindex="-1"><a class="header-anchor" href="#_5-以下是前缀管理命令列表-所有命令前需要加上前缀-才能触发。" aria-hidden="true">#</a> 5.以下是前缀管理命令列表,所有命令前需要加上前缀/才能触发。</h1><blockquote><p>前缀是指创建的bot在每次对话时,都将在你的消息前面加上这个前缀,可以使bot的回复的格式和内容满足前缀要求</p></blockquote><table><thead><tr><th>命令</th><th>命令含义</th><th>命令可用用户</th></tr></thead><tbody><tr><td>所有前缀</td><td>给出所有前缀的名称</td><td>所有用户可用</td></tr><tr><td>查询前缀</td><td>查询指定前缀的内容</td><td>所有用户可用</td></tr><tr><td>添加前缀</td><td>添加新的前缀(可覆盖同名前缀)</td><td>SparkGPT管理员可用</td></tr><tr><td>改名前缀</td><td>修改前缀的名字(可覆盖同名前缀)</td><td>SparkGPT管理员可用</td></tr><tr><td>删除前缀</td><td>删除指定前缀</td><td>SparkGPT管理员可用</td></tr></tbody></table><h1 id="_6-以下是webui管理命令列表-所有命令前需要加上前缀-才能触发" tabindex="-1"><a class="header-anchor" href="#_6-以下是webui管理命令列表-所有命令前需要加上前缀-才能触发" aria-hidden="true">#</a> 6.以下是webui管理命令列表,所有命令前需要加上前缀/才能触发</h1><table><thead><tr><th>命令</th><th>命令含义</th><th>命令可用用户</th></tr></thead><tbody><tr><td>开启webui</td><td>默认开启,打开webui,并返回webui开启的端口(管理员可用)</td><td>SparkGPT管理员可用</td></tr><tr><td>关闭webui</td><td>请在使用webui后关闭(管理员可用)</td><td>SparkGPT管理员可用</td></tr></tbody></table>',30);function qt(yt,wt){const n=s("ExternalLinkIcon");return o(),i("div",null,[G,l(" more "),E,t("h4",z,[B,e(" (1).需要确保本机已安装python3.8及以上版本(推荐py3.11)并配置了正确的系统环境变量 (如果没有安装py,可以参考这个教程进行安装 => "),t("a",F,[e("Python初学者在不同系统上安装Python的保姆级指引"),a(n)]),e(")")]),C,t("p",null,[e("在"),t("a",D,[e("下载页面"),a(n)]),e("下载对应版本安装，并将安装的目录下的bin目录添加到系统环境变量"),A,e(" 例如windows操作如下"),N,V,I,e(" 打开上面超链接，下载所指软件并安装，注意在安装时要注意记住你安装的路径是什么"),O,M,H,e(" 根据上如的安装路径，我们来添加系统环境变量"),K,e(" 首先搜索打开编辑系统环境变量界面"),L,X,W,e(" 点击编辑系统环境变量"),Y,Q,R,e(" 双击编辑系统变量中的Path变量"),U,Z,j,e(" 点击新建，并且在新的编辑框中输入你刚才记下的安装路径，后面在加上 /bin ,比如我的安装路径是C:\\Program Files\\wkhtmltopdf，我就填写C:\\Program Files\\wkhtmltopdf\\bin"),J,$,tt,e(" 最后记得一直点确定并关闭，确保保存成功")]),et,t("p",null,[e("配置示例,如下填写到nonebot项目文件夹的.env文件后，就可以打开"),t("a",nt,[e("http://127.0.0.1:8666/来访问webui控制面板"),a(n)])]),at,t("ol",null,[t("li",null,[t("p",null,[e("qq平台: 使用gocq进行链接，把机器人的qq和你的nonebot框架对接起来"),dt,e(" 这里只做简单描述，具体操作请看"),t("a",rt,[e("gcoq及签名服务器部署"),a(n)])]),t("p",null,[e("简单描述: (1).首先我们在github"),t("a",ot,[e("下载gocq"),a(n)]),e(",注意下载对应平台和架构的"),it,e(" (2).然后找一个文件夹用以存放gocq程序，在此处shift右击打开命令行，./gocq程序名称来初次运行，运行后生成配置文件，在config.yaml中填写对应配置，主要是qq和反代链接(注意obv11的反代地址是nonebot的env中配置的host(默认127.0.0.1)和port(默认8080)对应的 ws://host:port/onebot/v11/ws)以及签名服务器链接"),lt,e(" (3).最后运行gocq并按提示登录你的机器人小号即可")])]),st]),ct,t("p",null,[e("3.kook(原开黑啦)平台: 使用nonebot的kaiheila适配器一键链接"),ht,e(" 首先创建kook的应用，请打开"),t("a",bt,[e("KOOK开发者平台"),a(n)]),e("点击新建应用,并在创建后点击机器人的图标，选中左侧机器人一项，复制右侧token 填写到nonebot项目文件夹的.env文件中，格式如下：")]),ut,t("p",null,[e("4.discord平台: 使用nonebot的discord适配器一键连接"),pt,e(" (1).创建bot:"),_t,e(" 1).在"),t("a",gt,[e("discord application"),a(n)]),e("创建一个新的application"),mt,e(" 2).进入创建的application后在左侧bot中创建新bot,复制token,并将下面的所有开关打开"),vt,e(" (2).安装和使用discord适配器"),xt,e(" 1).安装discord适配器"),kt,e(" 由于目前没有正式发布,所以需要使用git安装(注意激活虚拟环境)")]),ft])}const Pt=r(T,[["render",qt],["__file","Spark_GPT.html.vue"]]);export{Pt as default};
